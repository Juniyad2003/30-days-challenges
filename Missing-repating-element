#include <iostream>
#include <vector>

using namespace std;

pair<int, int> findMissingAndRepeating(vector<int>& nums) {
    int n = nums.size();
    int xor_all = 0;
    
    // XOR all elements in the array and numbers from 1 to n
    for (int i = 0; i < n; i++) {
        xor_all ^= nums[i];
        xor_all ^= (i + 1);
    }
    
    // Find the rightmost set bit in xor_all
    int rightmost_set_bit = xor_all & ~(xor_all - 1);
    
    int missing = 0;
    int repeating = 0;
    
    // Divide the elements into two groups based on the rightmost set bit
    for (int i = 0; i < n; i++) {
        if (nums[i] & rightmost_set_bit) {
            missing ^= nums[i];
        } else {
            repeating ^= nums[i];
        }
        
        if ((i + 1) & rightmost_set_bit) {
            missing ^= (i + 1);
        } else {
            repeating ^= (i + 1);
        }
    }
    
    // Check if the missing/repeating numbers are in the original array
    for (int num : nums) {
        if (num == missing) {
            return {missing, repeating};
        }
    }
    
    return {repeating, missing};
}

int main() {
    vector<int> array = {3, 1, 3};
    pair<int, int> result = findMissingAndRepeating(array);
    
    cout << "Missing number: " << result.first << endl;
    cout << "Repeating number: " << result.second << endl;
    
    return 0;
}
