#include <iostream>

struct ListNode
{
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

bool hasCycle(ListNode* head)
{
    if (!head || !head->next)
    {
        return false; 
    }

    ListNode* slow = head;
    ListNode* fast = head;

    while (fast && fast->next) 
    {
        slow = slow->next;
        fast = fast->next->next; 

        if (slow == fast) 
        {
             return true; 
        }
    }

    return false; 
}

int main() 
{
    
    ListNode* head = new ListNode(1);
    head->next = new ListNode(2);
    head->next->next = new ListNode(3);
    head->next->next->next = head; 

    bool result = hasCycle(head);
    if (result)
   {
     cout << "The linked list contains a cycle." << std::endl;
   } 
    else 
     {
        cout << "The linked list does not contain a cycle." << std::endl;
     }

    return 0;
}

